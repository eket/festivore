// Generated by CoffeeScript 1.3.3
(function() {
  var MapView, icon, tile_layer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  icon = L.icon({
    iconUrl: '/static/img/marker-icon.png',
    shadowUrl: '/static/img/marker-shadow.png',
    iconAnchor: [13, 41]
  });

  tile_layer = L.tileLayer('http://otile1.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png', {
    attribution: '',
    maxZoom: 18
  });

  MapView = (function(_super) {

    __extends(MapView, _super);

    function MapView() {
      this.show_self = __bind(this.show_self, this);

      this.initialize = __bind(this.initialize, this);
      return MapView.__super__.constructor.apply(this, arguments);
    }

    MapView.prototype.el = $('#map');

    MapView.prototype.initialize = function() {
      $('#mapel').height($(window).height() - 40);
      this.map = L.map('mapel').setView([51.505, -0.09], 13);
      tile_layer.addTo(this.map);
      if (navigator.geolocation) {
        return navigator.geolocation.getCurrentPosition(this.show_self, console.log);
      } else {
        return error('not supported');
      }
    };

    MapView.prototype.show_self = function(position) {
      var lat, lon, _ref;
      _ref = [position.coords.latitude, position.coords.longitude], lat = _ref[0], lon = _ref[1];
      this.map.setView([lat, lon], 16);
      return this.marker = L.marker([lat, lon], {
        icon: icon
      }).addTo(this.map);
    };

    return MapView;

  })(Backbone.View);

  $(function() {
    return new MapView();
  });

}).call(this);
